#!/usr/bin/env python

from dominate import *
from dominate.tags import *
import urllib
import os
import errno
import datetime
import codecs
import chroma

def mkdir_p_idempotent(dir_name):
    try:
        os.makedirs(dir_name)
    except OSError as exc:
        if exc.errno == errno.EEXIST and os.path.isdir(dir_name):
            pass
        else:
            raise

def navbar(prefix):
    with nav():
        with ul():
            li(a('milestones', href=prefix, cls='nav-element'))
            li(a('labels', href=prefix+'labels', cls='nav-element'))
            li(a('users', href=prefix+'users', cls='nav-element'))

def page_footer():
    footer("Last generated at %s" % (datetime.datetime.now()))


def page(title, prefix=""):
    _html = document(title=title)
    with _html.head:
        link(rel='stylesheet', href=prefix+'css/normalize.css')
        link(rel='stylesheet', href=prefix+'css/site.css')
        meta(name="viewport", content="width=device-width, initial-scale=1.0")
    with _html.body:
        navbar(prefix)
    return _html

def split_issues_by_type(issues):
    pull_requests   = [i for i in issues if i['type'] == 'P']
    issues          = [i for i in issues if i['type'] == 'I']
    return (pull_requests, issues)

def generate_issue_list(issues, include_assignee=True):
    with ul():
        for i in sorted(issues, key=lambda x: x['assignee']):
            with li() as l:
                div("%s" % i["type"], cls='issue-type')
                a("#%d - %s" % (i["number"], i["title"]), target="_blank", href=i["url"])
                if "labels" in i:
                    for lab in i["labels"]:
                        color = chroma.Color(lab["color"])
                        h, light, s = color.hls
                        if light < 0.5:
                            color = "color:white; background-color: #%s;" % lab['color']
                        else:
                            color = "background-color: #%s;" % lab['color']
                        span(lab["name"], cls='label-badge', style=color)
            with l:
                if include_assignee:
                    l += "  --  "
                    if i["assignee"]:
                        a(i["assignee"], href="../users/%s.html" % i["assignee"])
                    else:
                        a("unassigned", cls="unassigned")

def generate_milestone_page(title, data0, output_dir):
    data = data0["repos"]
    _html2 = page(title=title, prefix="../")
    with _html2:
        with h1(title) as h:
            if data0.get("due", False):
                h += " due %s" % data0["due"]
        for k in sorted(data.keys()):
            if data[k]["open"]+data[k]["closed"] == 0:
                continue
            with h2() as h:
                a(k, target="_blank", href="https://github.com/%s/issues?milestone=%d&state=open" % (k, data[k]["number"]))
            h += " %d/%d " % (data[k]["closed"], data[k]["open"]+data[k]["closed"])
            with h:
                progress(max=data[k]["open"]+data[k]["closed"], value=data[k]["closed"])
            (pull_requests, issues) = split_issues_by_type(data[k]['issues'])
            generate_issue_list(pull_requests)
            generate_issue_list(issues)

    with _html2:
        page_footer()

    with codecs.open(os.path.join(output_dir, title, "index.html"), "w", encoding="utf-8") as f:
        f.write(_html2.render())


def generate_milestone_html(json_db, output_dir):
    _html = page(title="Milestones")
    for k in sorted(json_db.keys()):
        mkdir_p_idempotent(os.path.join(output_dir, k))
        with _html:
            with h1() as h:
                h += a(k, href="%s" % urllib.quote(k))
                if json_db[k].get("due", False):
                    h += " (due %s)" % json_db[k]["due"]

                openissues = sum([json_db[k]["repos"][x]["open"] for x in json_db[k]["repos"].keys()])
                closedissues = sum([json_db[k]["repos"][x]["closed"] for x in json_db[k]["repos"].keys()])
                h += " %d/%d " % (closedissues, openissues+closedissues)
                progress(max=openissues+closedissues, value=closedissues)
        generate_milestone_page(k, json_db[k], output_dir)

    with _html:
        page_footer()

    with codecs.open(os.path.join(output_dir, "index.html"), "w", encoding="utf-8") as f:
        f.write(_html.render())

def generate_user_page(username, userdata, output_dir):
    _html = page(title="%s - assigned issues" % username, prefix="../")
    for m in sorted(userdata.keys()):
        with _html:
            h1(m)
            for repo in sorted(userdata[m].keys()):
                h2(repo)
                (pull_requests, issues) = split_issues_by_type(userdata[m][repo])
                generate_issue_list(pull_requests, include_assignee=False)
                generate_issue_list(issues, include_assignee=False)

    with _html:
        page_footer()

    with codecs.open(os.path.join(output_dir, "users", "%s.html" % username), "w", encoding="utf-8") as f:
        f.write(_html.render())

def generate_user_html(json_db, output_dir):
    mkdir_p_idempotent(os.path.join(output_dir, "users"))
    users = {}
    usertotals = {}
    for m in json_db.keys():
        for r in json_db[m]["repos"].keys():
            for issue in json_db[m]["repos"][r]["issues"]:
                if issue["assignee"]:
                    u = issue["assignee"]
                    userdata = users.get(u, {})
                    userdatamile = userdata.get(m, {})
                    userdatamilerepo = userdatamile.get(r, [])
                    userdatamilerepo.append(issue)
                    userdatamile[r] = userdatamilerepo
                    userdata[m] = userdatamile
                    users[u] = userdata
                    if usertotals.get(u):
                        usertotals[u] += 1
                    else:
                        usertotals[u] = 1
    _html = page(title="User assigned issues", prefix="../")
    for user in reversed(sorted(users.keys(), key=lambda x: usertotals[x])):
        with _html:
            h1(a(user, href="%s.html" % user), " - %d" % usertotals[user])
        generate_user_page(user, users[user], output_dir)

    with _html:
        page_footer()

    with codecs.open(os.path.join(output_dir, "users", "index.html"), "w", encoding="utf-8") as f:
        f.write(_html.render())

def generate_label_page(label_group, repodata, output_dir):
    _html = page(title=label_group, prefix="../")
    with _html:
        h1(label_group)

    for repo in sorted(repodata.keys()):
        with _html:
            h2(repo)
            (pull_requests, issues) = split_issues_by_type(repodata[repo]['issues'])
            generate_issue_list(pull_requests)
            generate_issue_list(issues)

    with _html:
        page_footer()

    with codecs.open(os.path.join(output_dir, "labels", "%s.html" % label_group), "w", encoding="utf-8") as f:
        f.write(_html.render())

def generate_label_html(json_db, output_dir):
    mkdir_p_idempotent(os.path.join(output_dir, "labels"))
    _html = page("Label Groups", prefix="../")
    for label_group in sorted(json_db.keys()):
        with _html:
            with h1() as h:
                h+= a(label_group, href="%s.html" % label_group)
                open_total = sum([json_db[label_group][x]["open"] for x in json_db[label_group].keys()])
                closed_total = sum([json_db[label_group][x]["closed"] for x in json_db[label_group].keys()])
                h += " %d/%d" % (closed_total, open_total+closed_total)
                progress(max=open_total+closed_total, value=closed_total)
        generate_label_page(label_group, json_db[label_group], output_dir)

    with _html:
        page_footer()

    with codecs.open(os.path.join(output_dir, "labels", "index.html"), "w", encoding="utf-8") as f:
        f.write(_html.render())


if __name__ == '__main__':
    import sys
    import json
    (json_input, output_dir) = sys.argv[1:3]
    json_db = json.load(open(json_input, 'r'))
    generate_milestone_html(json_db["milestones"], output_dir)
    generate_user_html(json_db["milestones"], output_dir)
    generate_label_html(json_db["labels"], output_dir)
