#!/usr/bin/env python

import json
from github import Github
from github.GithubException import GithubException
from github.GithubObject import NotSet
from tabulate import tabulate
from dateutil.parser import parse
import issues
from datetime import datetime

def print_issues(i):
    for issue in i:
        print "* #%d\t%s" % (issue.number, issue.title)

def get_assignee(issue):
    if issue.assignee:
        return issue.assignee.login
    else:
        return None

def get_type(issue):
    if issue.pull_request:
        return "P"
    else:
        return "I"

def label_contents(label):
    return { "color": label.color, "name": label.name}


def print_milestones(m, num_uncategorized_issues):
    listed = [[x.title, x.due_on, x.description, x.open_issues] for x in m]
    listed.append([u"Uncategorized", u"Never", u"", num_uncategorized_issues])
    print tabulate(listed,
                   headers=[u"Title", u"Due on", u"Description", u"# Open"],
                   tablefmt="pipe")

def print_label_groups(issue_counts):
    listed = [[','.join([l.name for l in lg]), count]
              for (lg, count) in issue_counts]
    print tabulate(listed, headers=[u"Label Group", u"# Open"], tablefmt="pipe")

def list_issues_by_milestone(token, repo_list, milestone_name):
    g = Github(token)
    for r in repo_list:
        repo = g.get_repo(r)
        if milestone_name == 'none':
            m = 'none'
        else:
            m = issues.milestone_by_name(repo, milestone_name)
            if not m:
                raise Exception("No milestone with name %s" % milestone_name)
        print '===> Processing issues for repo %s' % r
        print_issues(issues.open_issues_in_milestone(repo, m))
        print '\n'

def list_issues_by_label(token, repo_list, label_names):
    g = Github(token)
    for r in repo_list:
        repo = g.get_repo(r)
        labels = [repo.get_label(l) for l in label_names.split(",")]
        found = issues.open_issues_by_labels(repo, labels)
        print '===> Processing issues for repo %s' % r
        print_issues(found)
        print '\n'

def list_milestones(token, repo_list):
    g = Github(token)
    for r in repo_list:
        print '===> Processing milestones for repo %s' % r

        try:
            repo = g.get_repo(r)
        except GithubException as e:
            print 'Error fetching repo: %s' % e
            raise e

        repo = g.get_repo(r)
        milestones = repo.get_milestones()
        num_uncategorized_issues = len(list(repo.get_issues(milestone='none')))
        print_milestones(milestones, num_uncategorized_issues)
        print '\n'

def list_label_groups(token, repo_list, label_groups_str):
    g = Github(token)
    label_group_strs = parse_label_groups(label_groups_str)
    for r in repo_list:
        repo = g.get_repo(r)
        label_groups = [[repo.get_label(l) for l in label_group]
                        for label_group in label_group_strs]
        issue_counts = [(lg, len([i for i in
                                  issues.open_issues_by_labels(repo, lg)]))
                        for lg in label_groups]
        print '===> Processing issues for repo %s' % r
        print_label_groups(issue_counts)
        print '\n'

def list_issues_by_size(token, repo_list):
    g = Github(token)
    for r in repo_list:
        sizes = ["S", "M", "L", "XL"]
        repo = g.get_repo(r)
        for size in sizes:
            name = "size: %s" % size
            label = repo.get_label(name)
            all_issues = list(iter(issues.open_issues_by_labels(repo, [label])))
            count = len(all_issues)
            print "===> [%s ISSUES] -- %d present" % (size, count)
            print_issues(all_issues)
            print "\n"

def create_milestone(token, milestone_title, description, due_date, repo_list):
    if due_date:
        parsed_date = parse(due_date)
    else:
        parsed_date = NotSet

    if not description:
        description = NotSet
    g = Github(token)
    for r in repo_list:
        repo = g.get_repo(r)
        try:
            repo.create_milestone(milestone_title, description=description,
                                  due_on=parsed_date)
        except GithubException as e:
            if e.status == 422:
                m = issues.milestone_by_name(repo, milestone_title)
                m.edit(milestone_title, description=description,
                       due_on=parsed_date)
            else:
                raise e

def delete_milestone(token, milestone_title, repo_list):
    g = Github(token)
    for r in repo_list:
        repo = g.get_repo(r)
        m = issues.milestone_by_name(repo, milestone_title)
        m.delete()

def close_milestone(token, milestone_title, repo_list):
    g = Github(token)
    for r in repo_list:
        repo = g.get_repo(r)
        m = issues.milestone_by_name(repo, milestone_title)
        m.edit(milestone_title, state='closed')

def rename_milestone(token, old_name, new_name, repo_list):
    g = Github(token)
    for r in repo_list:
        repo = g.get_repo(r)
        m = issues.milestone_by_name(repo, old_name)
        m.edit(new_name)

def make_issue_json(i):
    return {"number": i.number,
            "title": i.title,
            "url": i.html_url,
            "labels": [label_contents(lab) for lab in i.labels],
            "assignee": get_assignee(i),
            "type": get_type(i)}

def json_milestones(token, repo_list):
    json_map = {}
    g = Github(token)
    for r in repo_list:
        repo = g.get_repo(r)
        milestones = repo.get_milestones()
        for stone in milestones:
            issue_list = issues.open_issues_in_milestone(repo, stone)
            stone_json = json_map.get(stone.title, {})
            issues_json = stone_json.get("repos", {})
            issues_json[r] = {"open": stone.open_issues,
                              "closed": stone.closed_issues,
                              "number": stone.number,
                              "issues": map(make_issue_json, issue_list)
                              }
            stone_json["repos"] = issues_json
            if stone.due_on:
                stone_json["due"] = stone.due_on.strftime("%d %b %Y")
                if stone.due_on < datetime.now():
                    stone_json["overdue"] = True
            json_map[stone.title] = stone_json
        stone_json = json_map.get("uncategorized", {})
        issues_json = stone_json.get("repos", {})
        issue_list = list(repo.get_issues(milestone='none'))
        issues_json[r] = {"open": len(issue_list),
                          "closed": 0,
                          "number": 0,
                          "issues": map(make_issue_json, issue_list) }
        stone_json["repos"] = issues_json
        json_map["uncategorized"] = stone_json
    return json_map

def json_label_groups(token, repo_list, label_groups_str):
    label_map = {}
    g = Github(token)
    label_group_strs = parse_label_groups(label_groups_str)

    for lg in label_group_strs:
        lg_key = "+".join(lg)
        repos_map = label_map.get(lg_key, {})
        for r in repo_list:
            repo_map = repos_map.get(r, {})
            repo = g.get_repo(r)
            try:
                labels = [repo.get_label(l) for l in lg]
            except:
                continue
            open_issues = [make_issue_json(i) for i in
                           issues.open_issues_by_labels(repo, labels)]
            open_issues_count = len(open_issues)
            closed_issues_count = len([i for i in
                                       issues.closed_issues_by_labels(repo,
                                                                      labels)])
            repo_map["closed"] = closed_issues_count
            repo_map["open"] = open_issues_count
            repo_map["number"] = closed_issues_count + open_issues_count
            repo_map["issues"] = open_issues
            repos_map[r] = repo_map
        label_map[lg_key] = repos_map
    return label_map

def create_label_in_repos(token, repo_list, name, color):
    g = Github(token)
    for r in repo_list:
        repo = g.get_repo(r)
        existing_labels = repo.get_labels()
        label_names = [lab.name for lab in existing_labels]
        if name in label_names:
            continue # it already exists

        repo.create_label(name, color)


def parse_label_groups(label_groups_str):
    return [lgs.split(",") for lgs in label_groups_str.split(";")]

#
# Sub-command parser functions
#
def list_issues_parser(args):
    print "Here are all the args: %s" % args
    if args.group == "m":
        list_issues_by_milestone(args.token, args.repo, args.filter)
    elif args.group == "l":
        list_issues_by_label(args.token, args.repo, args.filter)

def list_milestones_parser(args):
    list_milestones(args.token, args.repo)

def list_labels_parser(args):
    list_label_groups(args.token, args.repo, args.filter)

def create_milestone_parser(args):
    create_milestone(args.token, args.milestone,
                     args.description, args.date,
                     args.repo)

def delete_milestone_parser(args):
    delete_milestone(args.token, args.milestone, args.repo)

def close_milestone_parser(args):
    close_milestone(args.token, args.milestone, args.repo)

def rename_milestone_parser(args):
    rename_milestone(args.token, args.milestone, args.new_name, args.repo)

def json_parser(args):
    labels_map = {}
    if args.labels:
        labels_map = json_label_groups(args.token, args.repo, args.labels)

    json_map = {}
    milestones_map = json_milestones(args.token, args.repo)
    json_map["milestones"] = milestones_map
    json_map["labels"] = labels_map
    json.dump(json_map, open(args.output, 'w'))

#
# Main
#
if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(
        description="Cross-repo Issues / Milestone tool for GitHub")
    parser.add_argument("-r", "--repo", action='append',
                        help="Repo to operate on, use multiple -r for list")
    parser.add_argument("-t", "--token", help="GitHub access token",
                        required=True)

    subparsers = parser.add_subparsers(dest="command",
                                       title="subcommands",
                                       description="valid subcommands",
                                       help='subcommand help')

    # List Issues Subcommand
    parser_li = subparsers.add_parser("list-issues",
                                      help="List issues for repos")
    parser_li.add_argument("-g", "--group", choices="ml",
                           help="group by '[m]ilestone' or '[l]abel'",
                           required=True)
    parser_li.add_argument("-f", "--filter", help="milestone or label name",
                           required=True)
    parser_li.set_defaults(func=list_issues_parser)

    # List Milestones Subcommand
    parser_lm = subparsers.add_parser("list-milestones",
                                      help="List all milestones")
    parser_lm.set_defaults(func=list_milestones_parser)

    # List Labels Subcommand
    parser_ll = subparsers.add_parser("list-labels",
                                      help="Lists Labels in repos")
    parser_ll.add_argument("-f",  "--filter", help="label groups",
                           required=True)
    parser_ll.set_defaults(func=list_labels_parser)

    # Create Milestone Subcommand
    parser_cm = subparsers.add_parser("create-milestone",
                                     help="Creates milestone on all repos")
    parser_cm.add_argument("-m", "--milestone", help="milestone name",
                          required=True)
    parser_cm.add_argument("-D", "--date", help="milestone due date")
    parser_cm.add_argument("-d", "--description", help="milestone description")
    parser_cm.set_defaults(func=create_milestone_parser)

    # Delete Milestone Subcommand
    parser_dm = subparsers.add_parser("delete-milestone",
                                      help="Deletes milestone on all repos")
    parser_dm.add_argument("-m", "--milestone",
                           help="milestone name", required=True)
    parser_dm.set_defaults(func=delete_milestone_parser)

    # Close Milestone Subcommand
    parser_close = subparsers.add_parser("close-milestone",
                                         help="Closes milestone on all repos")
    parser_close.add_argument("-m", "--milestone", help="milestone name",
                              required=True)
    parser_close.set_defaults(func=close_milestone_parser)

    # Rename Milestone Subcommand
    parser_rm = subparsers.add_parser("rename-milestone",
                                      help="Renames milestone on all repos")
    parser_rm.add_argument("-m", "--milestone", help="old milestone name",
                           required=True)
    parser_rm.add_argument("-n", "--new-name", help="new milestone name",
                           required=True)
    parser_rm.set_defaults(func=rename_milestone_parser)

    # Json Subcommand
    parser_json = subparsers.add_parser("json", help="Produces JSON output")
    parser_json.add_argument("-o", "--output", help="output filename",
                             required=True)
    parser_json.add_argument("-l", "--labels", help="label groups",
                             required=False)
    parser_json.set_defaults(func=json_parser)


    # Parse the args
    args = parser.parse_args()

    # Ensure we have at least one repo
    if len(args.repo) == 0:
        parser.print_usage()

    # Call subcommand function
    args.func(args)
